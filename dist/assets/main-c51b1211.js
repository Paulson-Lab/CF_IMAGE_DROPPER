(function(){const o=document.createElement("link").relList;if(o&&o.supports&&o.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))a(n);new MutationObserver(n=>{for(const r of n)if(r.type==="childList")for(const m of r.addedNodes)m.tagName==="LINK"&&m.rel==="modulepreload"&&a(m)}).observe(document,{childList:!0,subtree:!0});function e(n){const r={};return n.integrity&&(r.integrity=n.integrity),n.referrerPolicy&&(r.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?r.credentials="include":n.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function a(n){if(n.ep)return;n.ep=!0;const r=e(n);fetch(n.href,r)}})();const s=document.getElementById("dropZone"),i=document.getElementById("fileInput"),c=document.getElementById("imageGrid"),f=document.getElementById("emptyState");console.log("Script loaded successfully");document.addEventListener("click",t=>{t.target.closest(".menu-container")||l()});function l(){document.querySelectorAll(".menu-content").forEach(t=>{t.classList.remove("active")})}function g(t){l(),document.getElementById(t).classList.toggle("active")}s.addEventListener("dragover",t=>{console.log("Dragover event fired"),t.preventDefault(),s.classList.add("dragover")});["dragleave","dragend"].forEach(t=>{s.addEventListener(t,()=>{console.log(`${t} event fired`),s.classList.remove("dragover")})});s.addEventListener("drop",t=>{console.log("Drop event fired"),t.preventDefault(),s.classList.remove("dragover"),t.dataTransfer.files.length?(console.log("Files dropped:",t.dataTransfer.files),u(t.dataTransfer.files)):console.log("No files dropped")});s.addEventListener("click",()=>{console.log("Drop zone clicked"),i.click()});i.addEventListener("change",t=>{i.files.length&&(console.log("Files selected:",i.files),u(i.files))});async function u(t){console.log("Handling files:",t);const o=new FormData;Array.from(t).forEach(e=>{e.type.startsWith("image/")&&o.append("images",e)});try{const e=await fetch("/upload",{method:"POST",body:o});if(!e.ok){const a=await e.json();throw new Error(a.error||"Upload failed")}await d()}catch(e){console.error("Upload error:",e),alert("Upload failed: "+e.message)}}async function d(){console.log("Loading images");try{const t=await fetch("/images");if(!t.ok)throw new Error("Failed to load images");const o=await t.json();console.log("Images loaded:",o),o.length>0?(f.style.display="none",c.className="image-list",c.innerHTML=o.map((e,a)=>`
        <div class="image-row" data-filename="${e}">
          <img src="/images/${e}" alt="${e}" class="image-preview" title="${e}">
          <div class="image-filename" title="${e}">${e}</div>
          <div class="menu-container">
            <button class="menu-trigger" onclick="toggleMenu('menu-${a}')">â‹®</button>
            <div class="menu-content" id="menu-${a}">
              <button class="menu-item" onclick="copyImageUrl('${e}')">COPY URL</button>
              <button class="menu-item" onclick="renameImage('${e}')">RENAME</button>
              <button class="menu-item" onclick="deleteImage('${e}')">DELETE</button>
            </div>
          </div>
        </div>
      `).join("")):(f.style.display="block",c.innerHTML="",c.appendChild(f))}catch(t){console.error("Error loading images:",t),alert("Failed to load images: "+t.message)}}window.toggleMenu=g;window.copyImageUrl=function(t){l();const o=`${window.location.origin}/images/${t}`;navigator.clipboard.writeText(o).then(()=>{console.log("URL copied:",o);const e=document.createElement("div");e.textContent="URL copied",e.style.position="fixed",e.style.bottom="20px",e.style.left="50%",e.style.transform="translateX(-50%)",e.style.padding="8px 16px",e.style.background="#333",e.style.color="#fff",e.style.borderRadius="4px",e.style.fontSize="0.8rem",document.body.appendChild(e),setTimeout(()=>e.remove(),2e3)}).catch(()=>alert("Failed to copy URL"))};window.deleteImage=async function(t){if(l(),confirm("Are you sure you want to delete this image?"))try{const o=await fetch(`/images/${t}`,{method:"DELETE"});if(!o.ok){const e=await o.json();throw new Error(e.error||"Delete failed")}await d()}catch(o){console.error("Error:",o),alert("Delete failed: "+o.message)}};window.renameImage=async function(t){l();const o=prompt("Enter new filename (with extension):",t);if(o&&o!==t)try{const e=await fetch(`/images/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({newFilename:o})});if(!e.ok){const a=await e.json();throw new Error(a.error||"Rename failed")}await d()}catch(e){console.error("Error:",e),alert("Rename failed: "+e.message)}};d();
